package day09;

public class Example_04 {

		/* https://cafe.daum.net/studyitworld/aS1o/12
		 * 붕어빵 틀 = 클래스
		 * 붕어빵 = 인스턴스
		 * 
		 * 객체(Object)
		 * -물리적으로 존재하거나 추상화되어있는 상태로 자신만의 속성을 가지고 있다.
		 * 물리적으로 존재하는 객체 : 사람, 책, 컴퓨터, 자동차, 비행기
		 * 추상적인 객체 : 강의, 주문, 회원가입
		 * 여기서의 각 객체의 속성이 클래스.
		 * 
		 * 객체 지향 프로그래밍(Object-Oriented Programming, OOP)
		 * 특징 : 캡슐화, 추상화, 다형성, 상속
		 */
		
		/*
		 * 클래스(class)
		 * -일종의 틀, 설계도 이러한 것들을 클래스라고 한다.
		 * -클래스로부터 만들어진 객체를 인스턴스라 한다.
		 * 
		 * 객체지향 프로그래밍 개발의 단계
		 * 클래스 설계 > 인스턴스와(클래스를 이용한 객체생성) > 생성된 객체 사용
		 * ex. 사람
		 * 속성 : 이름, 나이, 거주지 => 필드
		 * 동작 : 먹는다, 걷는다, => 메소드
		 * 
		 * 객체간의 관계
		 * - 객체는 개별적으로 사용되기도 하며, 다른 객체와의 관계를 가질 수 있다.
		 * 집합관계 : 자동차는 엔진, 타이어, 핸들 등으로 구성되므로 자동차와 이 부품들은 집합관계
		 * 사용관계 : 사람은 자동차를 사용하므로 사람과 자동차는 사용관계
		 * 상속관계 : 기계와 자동차는 상속관계. 기계가 있으면 여러대의 자동차를 찍어낼 수 있다.
		 * 
		 * 외부 객체는 객체 내부의 구조를 알지 못하고 객체가 허가하는 필드와 메소드만 사용할 수 있다.
		 * 접근제어자
		 * private, public, protected, default
		 * 
		 * 클래스의 용도
		 * -라이브러리(API)용 : 다른 클래스에서 사용할 목적으로 설계 *(ex.Day09 프로젝트의 Student 클래스)
		 * -실행용 : 프로그램의 실행 => main()메소드를 제공하는 역할을 한다!! (ex.Example_04 클래스)
		 * 
		 */
	public static void main(String[] args) {
		Student s1 = new Student(); // student클래스의 인스턴스, Heap영역에 저장
		Student s2 = new Student();
		//Heap에는 s1이, stack영역에는 ....강의시간 21시 34분
		
		System.out.println(s1.toString());
		System.out.println(s2.toString());
		
	}

}
